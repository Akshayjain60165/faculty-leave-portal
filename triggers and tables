from django.db import models

class login_table(models.Model):
    id = models.IntegerField(primary_key = True)
    password = models.CharField(max_length = 20)
    dept_name =  models.CharField(max_length = 6)
    pos = models.CharField(max_length = 10)
    curr_pos = models.CharField(max_length = 10)
    ##def __str__(self):
        ##return self.name


class login_time(models.Model):
    pro_id = models.IntegerField(primary_key = False)
    time = models.DateTimeField(auto_now=False, auto_now_add=True)
    #ID = models.ForeignKey('Login_table.ID', on_delete=models.CASCADE)
    ##def __str__(self):
        ##return self.name


class num_of_leaves(models.Model):
    pro_id = models.IntegerField(primary_key = False)
    leaves = models.IntegerField(primary_key = False)
    #ID = models.ForeignKey('Login_table.ID', on_delete=models.CASCADE)
   ##def __str__(self):
        ##return self.name


class cur_running(models.Model):
    id = models.IntegerField(primary_key = True)
    pro_id = models.IntegerField(primary_key = False)
    datefrom = models.DateField(auto_now = False, auto_now_add = False)
    dateto = models.DateField(auto_now = False, auto_now_add = False)
    num_of_days = models.IntegerField(primary_key = False)
    reason = models.TextField(blank = True)
    #Pro_id = models.ForeignKey('Login_table.ID', on_delete=models.CASCADE)
    ##def __str__(self):
        ##return self.name


class app_status(models.Model):
    id = models.IntegerField(primary_key = True, unique = True)
    status = models.CharField(max_length = 10)
    #ID = models.ForeignKey('Cur_running.ID', on_delete=models.CASCADE)
    ##def __str__(self):
        ##return self.name


class cse_dep(models.Model):
    id = models.IntegerField(primary_key = True)
    pro_id = models.IntegerField(primary_key = False)
    datefrom = models.DateField(auto_now = False, auto_now_add = False)
    dateto = models.DateField(auto_now = False, auto_now_add = False)
    num_of_days = models.IntegerField(primary_key = False)
    reason = models.TextField(blank = True)
    ##def __str__(self):
        ##return self.name


class ee_dep(models.Model):
    id = models.IntegerField(primary_key = True)
    pro_id = models.IntegerField(primary_key = False)
    datefrom = models.DateField(auto_now = False, auto_now_add = False)
    dateto = models.DateField(auto_now = False, auto_now_add = False)
    num_of_days = models.IntegerField(primary_key = False)
    reason = models.TextField(blank = True)
    ##def __str__(self):
        ##return self.name


class mec_dep(models.Model):
    id = models.IntegerField(primary_key = True)
    pro_id = models.IntegerField(primary_key = False)
    datefrom = models.DateField(auto_now = False, auto_now_add = False)
    dateto = models.DateField(auto_now = False, auto_now_add = False)
    num_of_days = models.IntegerField(primary_key = False)
    reason = models.TextField(blank = True)
    ##def __str__(self):
        ##return self.name


class hoddean(models.Model):
    id = models.IntegerField(primary_key = True)
    pro_id = models.IntegerField(primary_key = False)
    datefrom = models.DateField(auto_now = False, auto_now_add = False)
    dateto = models.DateField(auto_now = False, auto_now_add = False)
    num_of_days = models.IntegerField(primary_key = False)
    reason = models.TextField
    ##def __str__(self):
        ##return self.name


class cse_hod(models.Model):
    id = models.IntegerField(primary_key = True)
    comm = models.TextField(blank = True)
    status =models.CharField(max_length = 10)
    #ID = models.ForeignKey('CSE_dep.ID', on_delete=models.CASCADE)
    ##def __str__(self):
        ##return self.name


class ee_hod(models.Model):
    id = models.IntegerField(primary_key = True)
    comm = models.TextField(blank = True)
    status =models.CharField(max_length = 10)
    #ID = models.ForeignKey('EE_dep.ID', on_delete=models.CASCADE)
    ##def __str__(self):
        ##return self.name


class mec_hod(models.Model):
    id = models.IntegerField(primary_key = True)
    comm = models.TextField(blank = True)
    status =models.CharField(max_length = 10)
    #ID = models.ForeignKey('MEC_dep.ID', on_delete=models.CASCADE)
    ##def __str__(self):
        ##return self.name

class hod_dean(models.Model):
    id = models.IntegerField(primary_key = True)
    pro_id = models.IntegerField(primary_key = False)
    datefrom = models.DateField(auto_now = False, auto_now_add = False)
    dateto = models.DateField(auto_now = False, auto_now_add = False)
    num_of_days = models.IntegerField(primary_key = False)
    reason = models.TextField(blank = True)
    #Pro_id = models.ForeignKey('Login_table.ID', on_delete=models.CASCADE)
    ##def __str__(self):
        ##return self.name


class dean(models.Model):
    id = models.IntegerField(primary_key = True)
    comm = models.TextField(blank = True)
    status =models.CharField(max_length = 10)
    #ID = models.ForeignKey('HOD_dean', on_delete=models.CASCADE)
    ##def __str__(self):
        ##return self.name


class director(models.Model):
    id = models.IntegerField(primary_key = True)
    comm = models.TextField(blank = True)
    status =models.CharField(max_length = 10)
    #ID = models.ForeignKey('hoddean', on_delete=models.CASCADE)
    ##def __str__(self):
        ##return self.name

class hodapp(models.Model):
    app_id =  models.IntegerField(primary_key = True)
    pro_id =  models.IntegerField(primary_key = False)
    time = models.DateTimeField(auto_now=False, auto_now_add=True)

class deanapp(models.Model):
    app_id =  models.IntegerField(primary_key = True)
    pro_id =  models.IntegerField(primary_key = False)
    time = models.DateTimeField(auto_now=False, auto_now_add=True)


class dirapp(models.Model):
    app_id =  models.IntegerField(primary_key = True)
    pro_id =  models.IntegerField(primary_key = False)
    time = models.DateTimeField(auto_now=False, auto_now_add=True)

admin

from django.contrib import admin


from table.models import (login_table, login_time, num_of_leaves, cur_running,
                              app_status, cse_dep, ee_dep, mec_dep, hoddean,
                              cse_hod, mec_hod, ee_hod, hod_dean, director, dean, hodapp, dirapp, deanapp)
admin.site.register(hodapp)
admin.site.register(dirapp)
admin.site.register(deanapp)
admin.site.register(login_table)
admin.site.register(login_time)
admin.site.register(num_of_leaves)
admin.site.register(cur_running)
admin.site.register(app_status)
admin.site.register(cse_dep)
admin.site.register(ee_dep)
admin.site.register(mec_dep)
admin.site.register(hoddean)
admin.site.register(cse_hod)
admin.site.register(mec_hod)
admin.site.register(ee_hod)
admin.site.register(hod_dean)
admin.site.register(director)
admin.site.register(dean)

dbms

 'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'dbms',
        'USER':'postgres',
        'PASSWORD' : 'Akshay@123',
        'HOST' : 'localhost',
        'PORT' : '5432'


Triggers

create or replace function CSEHOD_dean()
returns trigger
language plpgsql
as
$$
DECLARE
   dep  VARCHAR(10);
   depp record;
   tab cursor(idd int) for select * from table_cse_dep c1 where c1.id = idd; 
begin
open tab(new.id);
loop
fetch tab into depp;
exit when not found;
if new.status = 'Approval' then
insert into table_hod_dean(id,pro_id,datefrom,dateto,num_of_days,reason) values (depp.id,depp.pro_id,depp.datefrom,depp.dateto,depp.num_of_days,depp.reason);
end if;
end loop;
close tab;
if new.status = 'Rejected' then
delete from table_cse_dep where new.id = table_cse_dep.id;
insert into table_app_status(id,status) values(new.id,'Rejected');
end if;
return new;
end;
$$;
create trigger csehod_se_dean
after insert
on table_cse_hod
for each row
execute procedure CSEHOD_dean();



create or replace function EEHOD_dean()
returns trigger
language plpgsql
as
$$
DECLARE
   dep  VARCHAR(10);
   depp record;
   tab cursor(idd int) for select * from table_ee_dep c1 where c1.id = idd; 
begin
open tab(new.id);
loop
fetch tab into depp;
exit when not found;
if new.status = 'Approval' then
insert into table_hod_dean(id,pro_id,datefrom,dateto,num_of_days,reason) values (depp.id,depp.pro_id,depp.datefrom,depp.dateto,depp.num_of_days,depp.reason);
end if;
end loop;
close tab;
if new.status = 'Rejected' then
delete from table_ee_dep where new.id = table_ee_dep.id;
insert into table_app_status(id,status) values(new.id,'Rejected');
end if;
return new;
end;
$$;
create trigger eehod_se_dean
after insert
on table_ee_hod
for each row
execute procedure EEHOD_dean();

create or replace function MECHOD_dean()
returns trigger
language plpgsql
as
$$
DECLARE
   dep  VARCHAR(10);
   depp record;
   tab cursor(idd int) for select * from table_mec_dep c1 where c1.id = idd; 
begin
open tab(new.id);
loop
fetch tab into depp;
exit when not found;
if new.status = 'Approval' then
insert into table_hod_dean(id,pro_id,datefrom,dateto,num_of_days,reason) values (depp.id,depp.pro_id,depp.datefrom,depp.dateto,depp.num_of_days,depp.reason);
end if;
end loop;
close tab;
if new.status = 'Rejected' then
delete from table_mec_dep where new.id = table_mec_dep.id;
insert into table_app_status(id,status) values(new.id,'Rejected');
end if;
return new;
end;
$$;
create trigger mechod_se_dean
after insert
on table_mec_hod
for each row
execute procedure MECHOD_dean();


create or replace function dean()
returns trigger
language plpgsql
as
$$
DECLARE
   dep  VARCHAR(10);
   depp record;
   tab cursor(idd int) for select * from table_hod_dean c1 where c1.id = idd; 
begin
open tab(new.id);
loop
fetch tab into depp;
exit when not found;
if new.status = 'Approval' then
insert into table_app_status(id,status) values(new.id,'Approval');
delete from table_hod_dean where id =new.id;
end if;
end loop;
close tab;
if new.status = 'Rejected' then
insert into table_app_status(id,status) values(new.id,'Rejected');
delete from table_hod_dean where id =new.id;
end if;
return new;
end;
$$;
create trigger finaldean
after insert
on table_dean
for each row
execute procedure dean();



create or replace function status_check()
returns trigger
language plpgsql
as
$$
DECLARE
   dep  VARCHAR(10);
   depp record;
   deppp record;
   tab1 cursor(idd int) for select * from table_cur_running c1 where c1.id = idd; 
   tab2 cursor(idd int) for select l1.leaves from table_num_of_leaves l1 where idd = l1.pro_id;
begin
if new.status='Approval' then
open tab1(new.id);
loop
fetch tab1 into depp;
exit when not found;
open tab2(depp.pro_id);
loop
fetch tab2 into deppp;
exit when not found;
if deppp.leaves > depp.num_of_days then
update table_num_of_leaves set leaves =(deppp.leaves-depp.num_of_days) where pro_id=depp.pro_id;
end if;
if deppp.leaves < depp.num_of_days then
update table_num_of_leaves set leaves =0 where pro_id=depp.pro_id;
end if;
end loop;
close tab2;
end loop;
close tab1;
end if;
return new;
end;
$$;

create trigger check_on_number_of_leaves
after insert 
on table_app_status
for each row
execute procedure status_check();


create or replace function hoddean_director()
returns trigger
language plpgsql
as
$$
DECLARE
   dep  VARCHAR(10);
   depp record;
begin
insert into table_app_status(id,status) values (new.id,new.status);
return new;
end;
$$;

create trigger dh_d
after insert 
on table_director
for each row
execute procedure hoddean_director();



create or replace function del()
returns trigger
language plpgsql
as
$$
DECLARE
   dep  VARCHAR(10);
   depp record;
   deppp record;
   tab1 cursor(idd int) for select * from table_cur_running c1 where c1.id = idd; 
   tab2 cursor(idd int) for select * from table_login_table l1 where idd = l1.id;
begin
open tab1(new.id);
loop
fetch tab1 into depp;
exit when not found;
open tab2(depp.pro_id);
loop
fetch tab2 into deppp;
exit when not found;
if deppp.dept_name='CSE' and deppp.pos='faculty' then
delete from table_cse_dep where id=new.id;
delete from table_hod_dean where id = new.id;
end if;
if deppp.dept_name='EE' and deppp.pos='faculty' then
delete from table_ee_dep where id=new.id;
delete from table_hod_dean where id = new.id;
end if;
if deppp.dept_name='MEC' and deppp.pos='faculty' then
delete from table_mec_dep where id=new.id;
delete from table_hod_dean where id = new.id;
end if;
if deppp.pos='Dean' or deppp.pos='CSEHOD' or deppp.pos='EEHOD' or deppp.pos='MECHOD' then
delete from table_hoddean where id=new.id;
end if;
end loop;
close tab2;
end loop;
close tab1;
return new;
end;
$$;

create trigger de_from_dep
after insert 
on table_app_status
for each row
execute procedure del();
